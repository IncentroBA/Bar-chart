import { useState, useRef, useCallback, useEffect, createElement } from 'react';

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".barchart-widget {\n    margin-bottom: 24px;\n    position: relative;\n}\n\n.barchart-widget .barchart-legend {\n    margin-bottom: 30px;\n    padding: 0;\n}\n\n.barchart-widget .barchart-legend--horizontal {\n    display: grid;\n    gap: 8px â€‹16px;\n    grid-template-columns: repeat(auto-fit, 250px);\n}\n\n.barchart-widget .barchart-legend--vertical {\n    display: flex;\n    flex-direction: column;\n    width: max-content;\n}\n\n.barchart-widget .barchart-legend li {\n    align-items: center;\n    display: flex;\n    list-style: none;\n}\n\n.barchart-widget .barchart-legend li:hover {\n    cursor: pointer;\n}\n\n.barchart-widget .barchart-legend p {\n    margin: 0;\n}\n\n.barchart-widget .barchart-legend span {\n    border-radius: 50px;\n    display: block;\n    height: 16px;\n    margin-right: 8px;\n    width: 16px;\n}\n\n.barchart-widget .barchart-chart {\n    align-self: center;\n    display: flex;\n    grid-template-columns: repeat(100, 1fr);\n    grid-auto-flow: column;\n    margin: 0;\n    padding: 0;\n}\n\n.barchart-widget .barchart-chart li {\n    list-style: none;\n    min-height: 20px;\n    position: relative;\n}\n\n.barchart-widget .barchart-chart.barchart-chart--rounded li:first-of-type {\n    border-top-left-radius: 50px;\n    border-bottom-left-radius: 50px;\n}\n\n.barchart-widget .barchart-chart.barchart-chart--rounded li:last-of-type {\n    border-top-right-radius: 50px;\n    border-bottom-right-radius: 50px;\n}\n\n.barchart-widget .barchart-chart li:hover {\n    cursor: pointer;\n}\n\n.barchart-widget .barchart-chart li .barchart-tooltip {\n    background-color: white;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.3);\n    border-radius: 4px;\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s ease, transform 0.2s ease;\n    will-change: opacity;\n    width: max-content;\n    z-index: 1;\n}\n\n.barchart-widget .barchart-chart li .barchart-tooltip.align-right {\n    right: 0;\n}\n\n.barchart-widget .barchart-chart li .barchart-tooltip p {\n    margin: 0;\n    padding: 4px 8px;\n}\n\n.barchart-widget .barchart-chart li.show-tooltip .barchart-tooltip {\n    opacity: 1;\n    transform: translateY(-60%);\n}\n\n.barchart-widget .barchart-meter {\n    border-top: solid 1px black;\n    display: flex;\n    justify-content: space-between;\n}\n\n.barchart-widget .barchart-meter .item {\n    background-color: black;\n    height: 9px;\n    width: 1px;\n}\n\n.barchart-widget .barchart-indicators {\n    display: flex;\n}\n\n.barchart-widget .barchart-indicator {\n    flex: 1;\n}\n\n.barchart-widget .barchart-indicator:nth-child(2) {\n    text-align: center;\n}\n\n.barchart-widget .barchart-indicator:last-of-type {\n    text-align: right;\n}\n\n.barchart-widget .barchart-tooltip {\n    position: absolute;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJhckNoYXJ0LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLG1CQUFtQjtJQUNuQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsVUFBVTtBQUNkOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGNBQWM7SUFDZCw4Q0FBOEM7QUFDbEQ7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFNBQVM7QUFDYjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixjQUFjO0lBQ2QsWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLHVDQUF1QztJQUN2QyxzQkFBc0I7SUFDdEIsU0FBUztJQUNULFVBQVU7QUFDZDs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksNEJBQTRCO0lBQzVCLCtCQUErQjtBQUNuQzs7QUFFQTtJQUNJLDZCQUE2QjtJQUM3QixnQ0FBZ0M7QUFDcEM7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLDBDQUEwQztJQUMxQyxrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLG9CQUFvQjtJQUNwQixrREFBa0Q7SUFDbEQsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxRQUFRO0FBQ1o7O0FBRUE7SUFDSSxTQUFTO0lBQ1QsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLDJCQUEyQjtBQUMvQjs7QUFFQTtJQUNJLDJCQUEyQjtJQUMzQixhQUFhO0lBQ2IsOEJBQThCO0FBQ2xDOztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLFdBQVc7SUFDWCxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksT0FBTztBQUNYOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCIiwiZmlsZSI6IkJhckNoYXJ0LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5iYXJjaGFydC13aWRnZXQge1xuICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1sZWdlbmQge1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgcGFkZGluZzogMDtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtbGVnZW5kLS1ob3Jpem9udGFsIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdhcDogOHB4IOKAizE2cHg7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIDI1MHB4KTtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtbGVnZW5kLS12ZXJ0aWNhbCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIHdpZHRoOiBtYXgtY29udGVudDtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtbGVnZW5kIGxpIHtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtbGVnZW5kIGxpOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWxlZ2VuZCBwIHtcbiAgICBtYXJnaW46IDA7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWxlZ2VuZCBzcGFuIHtcbiAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGhlaWdodDogMTZweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICB3aWR0aDogMTZweDtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtY2hhcnQge1xuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwMCwgMWZyKTtcbiAgICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1jaGFydCBsaSB7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICBtaW4taGVpZ2h0OiAyMHB4O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtY2hhcnQuYmFyY2hhcnQtY2hhcnQtLXJvdW5kZWQgbGk6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNTBweDtcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA1MHB4O1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1jaGFydC5iYXJjaGFydC1jaGFydC0tcm91bmRlZCBsaTpsYXN0LW9mLXR5cGUge1xuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA1MHB4O1xuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA1MHB4O1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1jaGFydCBsaTpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1jaGFydCBsaSAuYmFyY2hhcnQtdG9vbHRpcCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgYm94LXNoYWRvdzogMCAycHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjMpO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBlYXNlLCB0cmFuc2Zvcm0gMC4ycyBlYXNlO1xuICAgIHdpbGwtY2hhbmdlOiBvcGFjaXR5O1xuICAgIHdpZHRoOiBtYXgtY29udGVudDtcbiAgICB6LWluZGV4OiAxO1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1jaGFydCBsaSAuYmFyY2hhcnQtdG9vbHRpcC5hbGlnbi1yaWdodCB7XG4gICAgcmlnaHQ6IDA7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWNoYXJ0IGxpIC5iYXJjaGFydC10b29sdGlwIHAge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiA0cHggOHB4O1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1jaGFydCBsaS5zaG93LXRvb2x0aXAgLmJhcmNoYXJ0LXRvb2x0aXAge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC02MCUpO1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1tZXRlciB7XG4gICAgYm9yZGVyLXRvcDogc29saWQgMXB4IGJsYWNrO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1tZXRlciAuaXRlbSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XG4gICAgaGVpZ2h0OiA5cHg7XG4gICAgd2lkdGg6IDFweDtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtaW5kaWNhdG9ycyB7XG4gICAgZGlzcGxheTogZmxleDtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtaW5kaWNhdG9yIHtcbiAgICBmbGV4OiAxO1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1pbmRpY2F0b3I6bnRoLWNoaWxkKDIpIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWluZGljYXRvcjpsYXN0LW9mLXR5cGUge1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC10b29sdGlwIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG4iXX0= */";
styleInject(css_248z);

function BarChart({
  context,
  chartValue,
  colors,
  customSortOrder,
  chartName,
  disableIndicators,
  legendOrientation,
  roundedCorners,
  sortAttribute,
  sortOrder
}) {
  const [canRender, setCanRender] = useState(false);
  const containerRef = useRef([]);
  const colorArray = ["#003f5c", "#2f4b7c", "#665191", "#a05195", "#d45087", "#f95d6a", "#ff7c43", "#ffa600"];
  const rounded = roundedCorners ? "barchart-chart--rounded" : null;
  const tooltipRef = useCallback(tooltipNode => {
    if (tooltipNode.getBoundingClientRect().right >= window.innerWidth) {
      tooltipNode.classList.add("align-right");
    }
  }, []);
  let sortInstrs = [];

  function showTooltip(index) {
    index.classList.add("show-tooltip");
  }

  function hideTooltip(index) {
    index.classList.remove("show-tooltip");
  }

  function setSortOrder() {
    if (!customSortOrder && sortAttribute === "chartName" && chartName.sortable) {
      sortInstrs = [[chartName.id, sortOrder]];
    } else if (!customSortOrder && sortAttribute === "chartValue" && chartValue.sortable) {
      sortInstrs = [[chartValue.id, sortOrder]];
    } else if (customSortOrder && customSortOrder.sortable) {
      sortInstrs = [[customSortOrder.id, sortOrder]];
    }

    context.setSortOrder(sortInstrs);
  }

  useEffect(() => {
    if (context && context.status === "available" && context.items.length > 0) {
      setCanRender(true);
      setSortOrder();
    }
  }, [context, colors]);

  if (canRender) {
    return createElement("div", {
      className: "barchart-widget"
    }, createElement("ul", {
      className: `barchart-legend barchart-legend--${legendOrientation}`
    }, context.items.map((item, index) => createElement("li", {
      key: item,
      ref: element => containerRef.current[index] = element,
      name: `barchart-legend-index-${index}`,
      onMouseEnter: () => showTooltip(containerRef.current[index]),
      onMouseLeave: () => hideTooltip(containerRef.current[index])
    }, createElement("span", {
      style: {
        backgroundColor: `var(--barchart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`
      }
    }), createElement("p", null, chartName.get(context.items[index]).displayValue)))), createElement("ul", {
      className: `barchart-chart ${rounded}`
    }, context.items.map((item, index) => createElement("li", {
      key: item,
      ref: element => containerRef.current[index] = element,
      name: `barchart-index-${index}`,
      onMouseEnter: () => showTooltip(containerRef.current[index]),
      onMouseLeave: () => hideTooltip(containerRef.current[index]),
      style: {
        flex: chartValue.get(context.items[index]).displayValue,
        backgroundColor: `var(--barchart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`
      }
    }, createElement("div", {
      className: "barchart-tooltip",
      ref: tooltipRef
    }, createElement("p", null, createElement("span", null, chartValue.get(context.items[index]).displayValue, "% "), chartName.get(context.items[index]).displayValue))))), !disableIndicators && createElement("div", {
      className: "barchart-meter"
    }, createElement("div", {
      className: "item"
    }), createElement("div", {
      className: "item"
    }), createElement("div", {
      className: "item"
    }), createElement("div", {
      className: "item"
    }), createElement("div", {
      className: "item"
    }), createElement("div", {
      className: "item"
    }), createElement("div", {
      className: "item"
    }), createElement("div", {
      className: "item"
    }), createElement("div", {
      className: "item"
    }), createElement("div", {
      className: "item"
    }), createElement("div", {
      className: "item"
    })), !disableIndicators && createElement("div", {
      className: "barchart-indicators"
    }, createElement("span", {
      className: "barchart-indicator"
    }, "0%"), createElement("span", {
      className: "barchart-indicator"
    }, "50%"), createElement("span", {
      className: "barchart-indicator"
    }, "100%")));
  } else {
    return createElement("div", {
      className: "barchart-widget"
    });
  }
}

export { BarChart as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
