define(['react'], (function (react) { 'use strict';

  function styleInject(css, ref) {
    if (ref === void 0) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') {
      return;
    }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = ".barchart-widget {\n    margin-bottom: 24px;\n    position: relative;\n}\n\n.barchart-widget .barchart-legend {\n    margin-bottom: 30px;\n    padding: 0;\n}\n\n.barchart-widget .barchart-legend--horizontal {\n    display: grid;\n    gap: 8px â€‹16px;\n    grid-template-columns: repeat(auto-fit, 250px);\n}\n\n.barchart-widget .barchart-legend--vertical {\n    display: flex;\n    flex-direction: column;\n    width: max-content;\n}\n\n.barchart-widget .barchart-legend li {\n    align-items: center;\n    display: flex;\n    list-style: none;\n}\n\n.barchart-widget .barchart-legend li:hover {\n    cursor: pointer;\n}\n\n.barchart-widget .barchart-legend p {\n    margin: 0;\n}\n\n.barchart-widget .barchart-legend span {\n    border-radius: 50px;\n    display: block;\n    height: 16px;\n    margin-right: 8px;\n    width: 16px;\n}\n\n.barchart-widget .barchart-chart {\n    align-self: center;\n    display: flex;\n    grid-template-columns: repeat(100, 1fr);\n    grid-auto-flow: column;\n    margin: 0;\n    padding: 0;\n}\n\n.barchart-widget .barchart-chart li {\n    list-style: none;\n    min-height: 20px;\n    position: relative;\n}\n\n.barchart-widget .barchart-chart li:hover {\n    cursor: pointer;\n}\n\n.barchart-widget .barchart-chart li .barchart-tooltip {\n    background-color: white;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.3);\n    border-radius: 4px;\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s ease, transform 0.2s ease;\n    will-change: opacity;\n    width: max-content;\n    z-index: 1;\n}\n\n.barchart-widget .barchart-chart li .barchart-tooltip.align-right {\n    right: 0;\n}\n\n.barchart-widget .barchart-chart li .barchart-tooltip p {\n    margin: 0;\n    padding: 4px 8px;\n}\n\n.barchart-widget .barchart-chart li.show-tooltip .barchart-tooltip {\n    opacity: 1;\n    transform: translateY(-60%);\n}\n\n.barchart-widget .barchart-meter {\n    border-top: solid 1px black;\n    display: flex;\n    justify-content: space-between;\n}\n\n.barchart-widget .barchart-meter .item {\n    background-color: black;\n    height: 9px;\n    width: 1px;\n}\n\n.barchart-widget .barchart-indicators {\n    display: flex;\n}\n\n.barchart-widget .barchart-indicator {\n    flex: 1;\n}\n\n.barchart-widget .barchart-indicator:nth-child(2) {\n    text-align: center;\n}\n\n.barchart-widget .barchart-indicator:last-of-type {\n    text-align: right;\n}\n\n.barchart-widget .barchart-tooltip {\n    position: absolute;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJhckNoYXJ0LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLG1CQUFtQjtJQUNuQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsVUFBVTtBQUNkOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGNBQWM7SUFDZCw4Q0FBOEM7QUFDbEQ7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFNBQVM7QUFDYjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixjQUFjO0lBQ2QsWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLHVDQUF1QztJQUN2QyxzQkFBc0I7SUFDdEIsU0FBUztJQUNULFVBQVU7QUFDZDs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHVCQUF1QjtJQUN2QiwwQ0FBMEM7SUFDMUMsa0JBQWtCO0lBQ2xCLFVBQVU7SUFDVixvQkFBb0I7SUFDcEIsa0RBQWtEO0lBQ2xELG9CQUFvQjtJQUNwQixrQkFBa0I7SUFDbEIsVUFBVTtBQUNkOztBQUVBO0lBQ0ksUUFBUTtBQUNaOztBQUVBO0lBQ0ksU0FBUztJQUNULGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLFVBQVU7SUFDViwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSwyQkFBMkI7SUFDM0IsYUFBYTtJQUNiLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJLHVCQUF1QjtJQUN2QixXQUFXO0lBQ1gsVUFBVTtBQUNkOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLE9BQU87QUFDWDs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0QiIsImZpbGUiOiJCYXJDaGFydC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYmFyY2hhcnQtd2lkZ2V0IHtcbiAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtbGVnZW5kIHtcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgIHBhZGRpbmc6IDA7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWxlZ2VuZC0taG9yaXpvbnRhbCB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBnYXA6IDhweCDigIsxNnB4O1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCAyNTBweCk7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWxlZ2VuZC0tdmVydGljYWwge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB3aWR0aDogbWF4LWNvbnRlbnQ7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWxlZ2VuZCBsaSB7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWxlZ2VuZCBsaTpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1sZWdlbmQgcCB7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1sZWdlbmQgc3BhbiB7XG4gICAgYm9yZGVyLXJhZGl1czogNTBweDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBoZWlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgd2lkdGg6IDE2cHg7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWNoYXJ0IHtcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMDAsIDFmcik7XG4gICAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtY2hhcnQgbGkge1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgbWluLWhlaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWNoYXJ0IGxpOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWNoYXJ0IGxpIC5iYXJjaGFydC10b29sdGlwIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3gtc2hhZG93OiAwIDJweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIG9wYWNpdHk6IDA7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjJzIGVhc2UsIHRyYW5zZm9ybSAwLjJzIGVhc2U7XG4gICAgd2lsbC1jaGFuZ2U6IG9wYWNpdHk7XG4gICAgd2lkdGg6IG1heC1jb250ZW50O1xuICAgIHotaW5kZXg6IDE7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWNoYXJ0IGxpIC5iYXJjaGFydC10b29sdGlwLmFsaWduLXJpZ2h0IHtcbiAgICByaWdodDogMDtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtY2hhcnQgbGkgLmJhcmNoYXJ0LXRvb2x0aXAgcCB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDRweCA4cHg7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWNoYXJ0IGxpLnNob3ctdG9vbHRpcCAuYmFyY2hhcnQtdG9vbHRpcCB7XG4gICAgb3BhY2l0eTogMTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTYwJSk7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LW1ldGVyIHtcbiAgICBib3JkZXItdG9wOiBzb2xpZCAxcHggYmxhY2s7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LW1ldGVyIC5pdGVtIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbiAgICBoZWlnaHQ6IDlweDtcbiAgICB3aWR0aDogMXB4O1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1pbmRpY2F0b3JzIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xufVxuXG4uYmFyY2hhcnQtd2lkZ2V0IC5iYXJjaGFydC1pbmRpY2F0b3Ige1xuICAgIGZsZXg6IDE7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LWluZGljYXRvcjpudGgtY2hpbGQoMikge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmJhcmNoYXJ0LXdpZGdldCAuYmFyY2hhcnQtaW5kaWNhdG9yOmxhc3Qtb2YtdHlwZSB7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG59XG5cbi5iYXJjaGFydC13aWRnZXQgLmJhcmNoYXJ0LXRvb2x0aXAge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cbiJdfQ== */";
  styleInject(css_248z);

  function BarChart({
    context,
    chartValue,
    colors,
    customSortOrder,
    chartName,
    legendOrientation,
    sortAttribute,
    sortOrder
  }) {
    const [canRender, setCanRender] = react.useState(false);
    const containerRef = react.useRef([]);
    const colorArray = ["#003f5c", "#2f4b7c", "#665191", "#a05195", "#d45087", "#f95d6a", "#ff7c43", "#ffa600"];
    const tooltipRef = react.useCallback(tooltipNode => {
      if (tooltipNode.getBoundingClientRect().right >= window.innerWidth) {
        tooltipNode.classList.add("align-right");
      }
    }, []);
    let sortInstrs = [];

    function showTooltip(index) {
      index.classList.add("show-tooltip");
    }

    function hideTooltip(index) {
      index.classList.remove("show-tooltip");
    }

    function setSortOrder() {
      if (!customSortOrder && sortAttribute === "chartName" && chartName.sortable) {
        sortInstrs = [[chartName.id, sortOrder]];
      } else if (!customSortOrder && sortAttribute === "chartValue" && chartValue.sortable) {
        sortInstrs = [[chartValue.id, sortOrder]];
      } else if (customSortOrder && customSortOrder.sortable) {
        sortInstrs = [[customSortOrder.id, sortOrder]];
      }

      context.setSortOrder(sortInstrs);
    }

    react.useEffect(() => {
      if (context && context.status === "available" && context.items.length > 0) {
        setCanRender(true);
        setSortOrder();
      }
    }, [context, colors]);

    if (canRender) {
      return react.createElement("div", {
        className: "barchart-widget"
      }, react.createElement("ul", {
        className: `barchart-legend barchart-legend--${legendOrientation}`
      }, context.items.map((item, index) => react.createElement("li", {
        key: item,
        ref: element => containerRef.current[index] = element,
        name: `barchart-legend-index-${index}`,
        onMouseEnter: () => showTooltip(containerRef.current[index]),
        onMouseLeave: () => hideTooltip(containerRef.current[index])
      }, react.createElement("span", {
        style: {
          backgroundColor: `var(--barchart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`
        }
      }), react.createElement("p", null, chartName.get(context.items[index]).displayValue)))), react.createElement("ul", {
        className: "barchart-chart"
      }, context.items.map((item, index) => react.createElement("li", {
        key: item,
        ref: element => containerRef.current[index] = element,
        name: `barchart-index-${index}`,
        onMouseEnter: () => showTooltip(containerRef.current[index]),
        onMouseLeave: () => hideTooltip(containerRef.current[index]),
        style: {
          flex: chartValue.get(context.items[index]).displayValue,
          backgroundColor: `var(--barchart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`
        }
      }, react.createElement("div", {
        className: "barchart-tooltip",
        ref: tooltipRef
      }, react.createElement("p", null, react.createElement("span", null, chartValue.get(context.items[index]).displayValue, "% "), chartName.get(context.items[index]).displayValue))))), react.createElement("div", {
        className: "barchart-meter"
      }, react.createElement("div", {
        className: "item"
      }), react.createElement("div", {
        className: "item"
      }), react.createElement("div", {
        className: "item"
      }), react.createElement("div", {
        className: "item"
      }), react.createElement("div", {
        className: "item"
      }), react.createElement("div", {
        className: "item"
      }), react.createElement("div", {
        className: "item"
      }), react.createElement("div", {
        className: "item"
      }), react.createElement("div", {
        className: "item"
      }), react.createElement("div", {
        className: "item"
      }), react.createElement("div", {
        className: "item"
      })), react.createElement("div", {
        className: "barchart-indicators"
      }, react.createElement("span", {
        className: "barchart-indicator"
      }, "0%"), react.createElement("span", {
        className: "barchart-indicator"
      }, "50%"), react.createElement("span", {
        className: "barchart-indicator"
      }, "100%")));
    } else {
      return react.createElement("div", {
        className: "barchart-widget"
      });
    }
  }

  return BarChart;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFyQ2hhcnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1pbmplY3QvZGlzdC9zdHlsZS1pbmplY3QuZXMuanMiLCIuLi8uLi8uLi8uLi8uLi9zcmMvQmFyQ2hhcnQuanN4Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHN0eWxlSW5qZWN0KGNzcywgcmVmKSB7XG4gIGlmICggcmVmID09PSB2b2lkIDAgKSByZWYgPSB7fTtcbiAgdmFyIGluc2VydEF0ID0gcmVmLmluc2VydEF0O1xuXG4gIGlmICghY3NzIHx8IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuOyB9XG5cbiAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuXG4gIGlmIChpbnNlcnRBdCA9PT0gJ3RvcCcpIHtcbiAgICBpZiAoaGVhZC5maXJzdENoaWxkKSB7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZSwgaGVhZC5maXJzdENoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVJbmplY3Q7XG4iLCJpbXBvcnQgXCIuL3VpL0JhckNoYXJ0LmNzc1wiO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCYXJDaGFydCh7XG4gICAgY29udGV4dCxcbiAgICBjaGFydFZhbHVlLFxuICAgIGNvbG9ycyxcbiAgICBjdXN0b21Tb3J0T3JkZXIsXG4gICAgY2hhcnROYW1lLFxuICAgIGxlZ2VuZE9yaWVudGF0aW9uLFxuICAgIHNvcnRBdHRyaWJ1dGUsXG4gICAgc29ydE9yZGVyXG59KSB7XG4gICAgY29uc3QgW2NhblJlbmRlciwgc2V0Q2FuUmVuZGVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBjb250YWluZXJSZWYgPSB1c2VSZWYoW10pO1xuICAgIGNvbnN0IGNvbG9yQXJyYXkgPSBbXCIjMDAzZjVjXCIsIFwiIzJmNGI3Y1wiLCBcIiM2NjUxOTFcIiwgXCIjYTA1MTk1XCIsIFwiI2Q0NTA4N1wiLCBcIiNmOTVkNmFcIiwgXCIjZmY3YzQzXCIsIFwiI2ZmYTYwMFwiXTtcblxuICAgIGNvbnN0IHRvb2x0aXBSZWYgPSB1c2VDYWxsYmFjayh0b29sdGlwTm9kZSA9PiB7XG4gICAgICAgIGlmICh0b29sdGlwTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCA+PSB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICAgICAgdG9vbHRpcE5vZGUuY2xhc3NMaXN0LmFkZChcImFsaWduLXJpZ2h0XCIpO1xuICAgICAgICB9XG4gICAgfSwgW10pO1xuXG4gICAgbGV0IHNvcnRJbnN0cnMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHNob3dUb29sdGlwKGluZGV4KSB7XG4gICAgICAgIGluZGV4LmNsYXNzTGlzdC5hZGQoXCJzaG93LXRvb2x0aXBcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGlkZVRvb2x0aXAoaW5kZXgpIHtcbiAgICAgICAgaW5kZXguY2xhc3NMaXN0LnJlbW92ZShcInNob3ctdG9vbHRpcFwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTb3J0T3JkZXIoKSB7XG4gICAgICAgIGlmICghY3VzdG9tU29ydE9yZGVyICYmIHNvcnRBdHRyaWJ1dGUgPT09IFwiY2hhcnROYW1lXCIgJiYgY2hhcnROYW1lLnNvcnRhYmxlKSB7XG4gICAgICAgICAgICBzb3J0SW5zdHJzID0gW1tjaGFydE5hbWUuaWQsIHNvcnRPcmRlcl1dO1xuICAgICAgICB9IGVsc2UgaWYgKCFjdXN0b21Tb3J0T3JkZXIgJiYgc29ydEF0dHJpYnV0ZSA9PT0gXCJjaGFydFZhbHVlXCIgJiYgY2hhcnRWYWx1ZS5zb3J0YWJsZSkge1xuICAgICAgICAgICAgc29ydEluc3RycyA9IFtbY2hhcnRWYWx1ZS5pZCwgc29ydE9yZGVyXV07XG4gICAgICAgIH0gZWxzZSBpZiAoY3VzdG9tU29ydE9yZGVyICYmIGN1c3RvbVNvcnRPcmRlci5zb3J0YWJsZSkge1xuICAgICAgICAgICAgc29ydEluc3RycyA9IFtbY3VzdG9tU29ydE9yZGVyLmlkLCBzb3J0T3JkZXJdXTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LnNldFNvcnRPcmRlcihzb3J0SW5zdHJzKTtcbiAgICB9XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0LnN0YXR1cyA9PT0gXCJhdmFpbGFibGVcIiAmJiBjb250ZXh0Lml0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNldENhblJlbmRlcih0cnVlKTtcbiAgICAgICAgICAgIHNldFNvcnRPcmRlcigpO1xuICAgICAgICB9XG4gICAgfSwgW2NvbnRleHQsIGNvbG9yc10pO1xuXG4gICAgaWYgKGNhblJlbmRlcikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiYXJjaGFydC13aWRnZXRcIj5cbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPXtgYmFyY2hhcnQtbGVnZW5kIGJhcmNoYXJ0LWxlZ2VuZC0tJHtsZWdlbmRPcmllbnRhdGlvbn1gfT5cbiAgICAgICAgICAgICAgICAgICAge2NvbnRleHQuaXRlbXMubWFwKChpdGVtLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpdGVtfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17ZWxlbWVudCA9PiAoY29udGFpbmVyUmVmLmN1cnJlbnRbaW5kZXhdID0gZWxlbWVudCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17YGJhcmNoYXJ0LWxlZ2VuZC1pbmRleC0ke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXsoKSA9PiBzaG93VG9vbHRpcChjb250YWluZXJSZWYuY3VycmVudFtpbmRleF0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17KCkgPT4gaGlkZVRvb2x0aXAoY29udGFpbmVyUmVmLmN1cnJlbnRbaW5kZXhdKX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBgdmFyKC0tYmFyY2hhcnQtY29sb3ItJHtbaW5kZXhdfSwgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnNbaW5kZXhdID8gY29sb3JzW2luZGV4XS52YWx1ZSA6IGNvbG9yQXJyYXlbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPntjaGFydE5hbWUuZ2V0KGNvbnRleHQuaXRlbXNbaW5kZXhdKS5kaXNwbGF5VmFsdWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiYmFyY2hhcnQtY2hhcnRcIj5cbiAgICAgICAgICAgICAgICAgICAge2NvbnRleHQuaXRlbXMubWFwKChpdGVtLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpdGVtfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17ZWxlbWVudCA9PiAoY29udGFpbmVyUmVmLmN1cnJlbnRbaW5kZXhdID0gZWxlbWVudCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17YGJhcmNoYXJ0LWluZGV4LSR7aW5kZXh9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk1vdXNlRW50ZXI9eygpID0+IHNob3dUb29sdGlwKGNvbnRhaW5lclJlZi5jdXJyZW50W2luZGV4XSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXsoKSA9PiBoaWRlVG9vbHRpcChjb250YWluZXJSZWYuY3VycmVudFtpbmRleF0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IGNoYXJ0VmFsdWUuZ2V0KGNvbnRleHQuaXRlbXNbaW5kZXhdKS5kaXNwbGF5VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYHZhcigtLWJhcmNoYXJ0LWNvbG9yLSR7W2luZGV4XX0sICR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnNbaW5kZXhdID8gY29sb3JzW2luZGV4XS52YWx1ZSA6IGNvbG9yQXJyYXlbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiYXJjaGFydC10b29sdGlwXCIgcmVmPXt0b29sdGlwUmVmfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57Y2hhcnRWYWx1ZS5nZXQoY29udGV4dC5pdGVtc1tpbmRleF0pLmRpc3BsYXlWYWx1ZX0lIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGFydE5hbWUuZ2V0KGNvbnRleHQuaXRlbXNbaW5kZXhdKS5kaXNwbGF5VmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiYXJjaGFydC1tZXRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiYXJjaGFydC1pbmRpY2F0b3JzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImJhcmNoYXJ0LWluZGljYXRvclwiPjAlPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJiYXJjaGFydC1pbmRpY2F0b3JcIj41MCU8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImJhcmNoYXJ0LWluZGljYXRvclwiPjEwMCU8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJiYXJjaGFydC13aWRnZXRcIj48L2Rpdj47XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbInN0eWxlSW5qZWN0IiwiY3NzIiwicmVmIiwiaW5zZXJ0QXQiLCJkb2N1bWVudCIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJmaXJzdENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwiQmFyQ2hhcnQiLCJjb250ZXh0IiwiY2hhcnRWYWx1ZSIsImNvbG9ycyIsImN1c3RvbVNvcnRPcmRlciIsImNoYXJ0TmFtZSIsImxlZ2VuZE9yaWVudGF0aW9uIiwic29ydEF0dHJpYnV0ZSIsInNvcnRPcmRlciIsImNhblJlbmRlciIsInNldENhblJlbmRlciIsInVzZVN0YXRlIiwiY29udGFpbmVyUmVmIiwidXNlUmVmIiwiY29sb3JBcnJheSIsInRvb2x0aXBSZWYiLCJ1c2VDYWxsYmFjayIsInRvb2x0aXBOb2RlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmlnaHQiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiY2xhc3NMaXN0IiwiYWRkIiwic29ydEluc3RycyIsInNob3dUb29sdGlwIiwiaW5kZXgiLCJoaWRlVG9vbHRpcCIsInJlbW92ZSIsInNldFNvcnRPcmRlciIsInNvcnRhYmxlIiwiaWQiLCJ1c2VFZmZlY3QiLCJzdGF0dXMiLCJpdGVtcyIsImxlbmd0aCIsIm1hcCIsIml0ZW0iLCJlbGVtZW50IiwiY3VycmVudCIsImJhY2tncm91bmRDb2xvciIsInZhbHVlIiwiZ2V0IiwiZGlzcGxheVZhbHVlIiwiZmxleCJdLCJtYXBwaW5ncyI6Ijs7RUFBQSxTQUFTQSxXQUFULENBQXFCQyxHQUFyQixFQUEwQkMsR0FBMUIsRUFBK0I7RUFDN0IsTUFBS0EsR0FBRyxLQUFLLEtBQUssQ0FBbEIsRUFBc0JBLEdBQUcsR0FBRyxFQUFOO0VBQ3RCLE1BQUlDLFFBQVEsR0FBR0QsR0FBRyxDQUFDQyxRQUFuQjs7RUFFQSxNQUFJLENBQUNGLEdBQUQsSUFBUSxPQUFPRyxRQUFQLEtBQW9CLFdBQWhDLEVBQTZDO0VBQUU7RUFBUzs7RUFFeEQsTUFBSUMsSUFBSSxHQUFHRCxRQUFRLENBQUNDLElBQVQsSUFB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
